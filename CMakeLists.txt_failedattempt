cmake_minimum_required(VERSION 3.5)


idf_component_register()

include(ExternalProject)

set(LIBNMEA_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/libnmea_install)

# builds the project and installs it to the specified location:
ExternalProject_Add(libnmea_build
        # Download the source code of libnmea
        GIT_REPOSITORY https://github.com/jacketizer/libnmea.git
        GIT_TAG origin/master
        # Specify arguments to be passed when running CMake for libnmea.
        CMAKE_ARGS
        # Use the same CMake toolchain file as for the main project.
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        # tinyxml2-specific settings: disable building everything except for the static library
        -DNMEA_BUILD_STATIC_LIB=1
        -DNMEA_BUILD_SHARED_LIB=0
        -DNMEA_BUILD_EXAMPLES=0
        -DNMEA_EXAMPLES_LINK_STATIC=0
        -DNMEA_UNIT_TESTS=0
        -DNMEA_UNIT_TESTS_LINK_STATIC=0
        -DNMEA_WITH_MEMCHECK=0
        # Pass the install directory to the subproject.
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>

#        -DLIBRARY_PATH=${LIBNMEA_INSTALL_DIR}/lib
#        -DLD_LIBRARY_PATH=${LIBNMEA_INSTALL_DIR}/lib
#        -DLIBRARY_PATH=${LIBNMEA_INSTALL_DIR}/lib


        # These options are set so that Ninja immediately outputs
        # the subproject build to the terminal. Otherwise it looks like the
        # build process "hangs" while the subproject is being built.
        USES_TERMINAL_DOWNLOAD TRUE
        USES_TERMINAL_CONFIGURE TRUE
        USES_TERMINAL_BUILD TRUE
        BUILD_ALWAYS=TRUE
        DOWNLOAD_EXTRACT_TIMESTAMP TRUE
        # Specify the installation directory for the subproject
        INSTALL_DIR ${LIBNMEA_INSTALL_DIR}
        # Let CMake know that the library is generated by the subproject build step.
        BUILD_BYPRODUCTS "${LIBNMEA_INSTALL_DIR}/lib/libnmea.a"

#        BUILD_BYPRODUCTS "${LIBNMEA_INSTALL_DIR}/lib/nmea/libgpgga.a"
#        BUILD_BYPRODUCTS "${LIBNMEA_INSTALL_DIR}/lib/nmea/libgpgll.a"
#        BUILD_BYPRODUCTS "${LIBNMEA_INSTALL_DIR}/lib/nmea/libgpgsa.a"
#        BUILD_BYPRODUCTS "${LIBNMEA_INSTALL_DIR}/lib/nmea/libgpgsv.a"
#        BUILD_BYPRODUCTS "${LIBNMEA_INSTALL_DIR}/lib/nmea/libgprmc.a"
#        BUILD_BYPRODUCTS "${LIBNMEA_INSTALL_DIR}/lib/nmea/libgptxt.a"
#        BUILD_BYPRODUCTS "${LIBNMEA_INSTALL_DIR}/lib/nmea/libgpvtg.a"

        )

# Now that the subproject build is set up, we need to consume the results
# of the build: the header file and the static library.
# To do this, define an imported CMake library:
#add_prebuilt_library(libnmea "${LIBNMEA_INSTALL_DIR}/lib/libnmea.a"
#        PRIV_REQUIRES cxx)
#target_include_directories(libnmea INTERFACE "${LIBNMEA_INSTALL_DIR}/include")
#add_dependencies(libnmea libnmea_build)
#
## Link the imported library to the current component.
#target_link_libraries(${COMPONENT_LIB} INTERFACE libnmea)

add_prebuilt_library(libnmea "${LIBNMEA_INSTALL_DIR}/lib/libnmea.a"
        PRIV_REQUIRES cxx)
add_dependencies(libnmea libnmea_build)


target_include_directories(libnmea INTERFACE "${LIBNMEA_INSTALL_DIR}/include")
add_dependencies(libnmea libnmea_build)

# Link the imported library to the current component.
target_link_libraries(${COMPONENT_LIB} INTERFACE libnmea)
target_compile_definitions(${COMPONENT_LIB} PUBLIC)
set_directory_properties( PROPERTIES ADDITIONAL_CLEAN_FILES
        "${LIBNMEA_INSTALL_DIR}/lib/libnmea.a")